import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Border, Side, Alignment, PatternFill, Font
from tqdm import tqdm
import time
import sys
import threading

# Läs in CSV-filer
ib_df = pd.read_csv('sie_to_pnl/data/IB.csv', encoding='ascii')
konto_df = pd.read_csv('sie_to_pnl/data/KONTO.csv', encoding='ISO-8859-1')
res_df = pd.read_csv('sie_to_pnl/data/RES.csv', encoding='ISO-8859-1')

# Hämta unika kontonummer från IB.csv och RES.csv
ib_accounts = ib_df['konto'].unique()
res_accounts = res_df['konto'].unique()

# Kombinera alla kontonummer från IB och RES
all_accounts = pd.concat([pd.Series(ib_accounts), pd.Series(res_accounts)]).unique()

# Filtrera konto_df baserat på de kombinerade kontonumren från IB och RES
filtered_konto_df = konto_df[konto_df['kontonummer'].isin(all_accounts)]

# Skapa den slutliga DataFramen
output_df = pd.DataFrame({
    'account_number': filtered_konto_df['kontonummer'],
    'account_title': filtered_konto_df['kontonamn'],
    'zero_acc': ''
})

# Skapa filnamn baserat på aktuell tid
current_time = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
output_filename = f'sie_to_pnl_output_{current_time}.xlsx'

# Spara till en Excel-fil
output_df.to_excel(f'sie_to_pnl/data/{output_filename}', sheet_name='Accounts', index=False)

# Öppna workbook igen för att modifiera den
wb = load_workbook(f'sie_to_pnl/data/{output_filename}')
ws = wb['Accounts']

# Auto-resize kolumnbredd baserat på innehållet
for col in ws.columns:
    max_length = 0
    column = col[0].column_letter  # Hämta kolumnnamn
    for cell in col:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(cell.value)
        except:
            pass
    adjusted_width = max_length + 2
    ws.column_dimensions[column].width = adjusted_width

# Ta bort borders från rubrikraden och vänsterjustera texten
thin_border = Border(left=Side(style=None),
                     right=Side(style=None),
                     top=Side(style=None),
                     bottom=Side(style=None))

for cell in ws[1]:
    cell.border = thin_border
    cell.alignment = Alignment(horizontal='left')  # Vänsterjustera texten

# Lägg till ett nytt blad för IB.csv-datan
ws_ib = wb.create_sheet(title='IB')

# Skriv headers från IB.csv-datan till det nya bladet
for col_idx, header in enumerate(ib_df.columns, start=1):
    ws_ib.cell(row=1, column=col_idx, value=header)

# Skriv IB.csv-datan till det nya bladet, efter headers
for r_idx, row in enumerate(ib_df.values, start=2):  # Startar från rad 2 för att lämna plats för headers
    for c_idx, value in enumerate(row, start=1):
        ws_ib.cell(row=r_idx, column=c_idx, value=value)

## Auto-resize kolumnbredd för IB-bladet
for col_idx, col in enumerate(ws_ib.iter_cols(min_row=1, max_row=ws_ib.max_row, min_col=1, max_col=ws_ib.max_column), start=1):
    max_length = 0
    column = col_idx  # Kolumnindex
    for cell in col:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(str(cell.value))
        except:
            pass
    adjusted_width = max_length + 2
    ws_ib.column_dimensions[get_column_letter(column)].width = adjusted_width

# Spara ändringarna
wb.save(f'sie_to_pnl/data/{output_filename}')
wb.close()

## P&L sheetet prep work##

# Öppna workbook igen för att lägga till P&L-sheetet
wb = load_workbook(f'sie_to_pnl/data/{output_filename}')
ws_pl = wb.create_sheet('P&L (reported)')  # Skapa ett nytt sheet som heter "P&L (reported)"

# Hämta maxraden i P&L separat för att undvika konflikter
pl_max_row = 7 + len(filtered_konto_df[filtered_konto_df['kontonummer'] >= 3000]) - 1  # Raden där kontona slutar i P&L
pl_first_row = 7  # Första raden där data börjar i P&L

# Förifyll P&L-sheetet med standardinfo
ws_pl['C2'] = 'SEKm'
ws_pl['C3'] = 'Line item'
ws_pl['B4'] = 'Acc #'
ws_pl['C4'] = 'Acc name'

# Gör "Line item" bold
bold_font = Font(bold=True)
ws_pl['C3'].font = bold_font

# Skapa en grå bakgrundsfärg #F2F2F2
gray_fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")

# Lägg grå bakgrunden på förifyllda celler
ws_pl['B2'].fill = gray_fill
ws_pl['C2'].fill = gray_fill
ws_pl['B3'].fill = gray_fill
ws_pl['C3'].fill = gray_fill
ws_pl['B4'].fill = gray_fill
ws_pl['C4'].fill = gray_fill

# Filtrera kontonummer för konton som är minst 3000
filtered_pl_df = filtered_konto_df[filtered_konto_df['kontonummer'] >= 3000]

# Lägg till kontonummer i kolumn B och account title i kolumn C i P&L-sheetet
row_num = pl_first_row  # Börja på rad 7
for index, row in filtered_pl_df.iterrows():
    ws_pl.cell(row=row_num, column=2).value = row['kontonummer']  # Kolumn B
    ws_pl.cell(row=row_num, column=3).value = row['kontonamn']  # Kolumn C
    row_num += 1  # Flytta till nästa rad

# Auto-resize kolumnbredd baserat på innehållet i P&L-sheetet
for col in ws_pl.columns:
    max_length = 0
    column = col[0].column_letter  # Hämta kolumnnamn
    for cell in col:
        if cell.value:
            cell_length = len(str(cell.value))
            if cell_length > max_length:
                max_length = cell_length
    adjusted_width = (max_length + 2) * 1.2  # Justera bredden lite extra för marginal
    ws_pl.column_dimensions[column].width = adjusted_width

## BS sheetet prep work##

# Skapa ett nytt sheet för konton mellan 1000 och 2999
ws_pl_1000_2999 = wb.create_sheet('BS (reported)')

# Förifyll det nya sheetet med standardinfo
ws_pl_1000_2999['C2'] = 'SEKm'
ws_pl_1000_2999['C3'] = 'Line item'
ws_pl_1000_2999['B4'] = 'Acc #'
ws_pl_1000_2999['C4'] = 'Acc name'

# Gör "Line item" bold
ws_pl_1000_2999['C3'].font = bold_font

# Lägg grå bakgrunden på förifyllda celler
ws_pl_1000_2999['B2'].fill = gray_fill
ws_pl_1000_2999['C2'].fill = gray_fill
ws_pl_1000_2999['B3'].fill = gray_fill
ws_pl_1000_2999['C3'].fill = gray_fill
ws_pl_1000_2999['B4'].fill = gray_fill
ws_pl_1000_2999['C4'].fill = gray_fill

# Filtrera kontonummer för konton som är mellan 1000 och 2999
filtered_1000_2999_df = filtered_konto_df[(filtered_konto_df['kontonummer'] >= 1000) & (filtered_konto_df['kontonummer'] <= 2999)]

# Lägg till kontonummer i kolumn B och account title i kolumn C i det nya sheetet
row_num = 7  # Börja på rad 7
for index, row in filtered_1000_2999_df.iterrows():
    ws_pl_1000_2999.cell(row=row_num, column=2).value = row['kontonummer']  # Kolumn B
    ws_pl_1000_2999.cell(row=row_num, column=3).value = row['kontonamn']  # Kolumn C
    row_num += 1  # Flytta till nästa rad

# Auto-resize kolumnbredd baserat på innehållet i det nya sheetet
for col in ws_pl_1000_2999.columns:
    max_length = 0
    column = col[0].column_letter  # Hämta kolumnnamn
    for cell in col:
        if cell.value:
            cell_length = len(str(cell.value))
            if cell_length > max_length:
                max_length = cell_length
    adjusted_width = (max_length + 2) * 1.2  # Justera bredden lite extra för marginal
    ws_pl_1000_2999.column_dimensions[column].width = adjusted_width

## Transactions ##

# Lägg till ny funktion för att läsa TRANSACTIONS.csv och skapa nytt sheet
transactions_df = pd.read_csv('sie_to_pnl/data/TRANSACTIONS.csv', encoding='ISO-8859-1')

# Omvandla 'ver_datum' till formatet YYYY-MM-DD
transactions_df['ver_datum'] = pd.to_datetime(transactions_df['ver_datum'].astype(str), format='%Y%m%d').dt.strftime('%Y-%m-%d')

# Extrahera år och månad från ver_datum och skapa en 'Month' kolumn som numeriskt värde
transactions_df['Month'] = pd.to_datetime(transactions_df['ver_datum']).dt.strftime('%Y%m').astype(int)

# Extrahera år från ver_datum och skapa ny kolumn, konvertera år till numeriskt format
transactions_df['Year'] = transactions_df['ver_datum'].str[:4].astype(int)

# Skapa ett nytt sheet med namnet baserat på året
year_short = str(transactions_df['Year'].iloc[0])[2:4]  # Få de två sista siffrorna av året
ws_transactions = wb.create_sheet(f'Transactions {year_short}')

# Skriv DataFrame till det nya sheet med en progress bar
for r_idx, row in enumerate(tqdm(transactions_df.values, desc="Writing transactions"), 1):
    for c_idx, value in enumerate(row, 1):
        ws_transactions.cell(row=r_idx + 1, column=c_idx).value = value

## Transactions - Aggregated, här summeras allt på konto och månadsnivå så det blir färre rader##

# Lägg till rubrikerna
for col_num, column_title in enumerate(transactions_df.columns, 1):
    ws_transactions.cell(row=1, column=col_num).value = column_title

# Skapa ett nytt DataFrame för aggregering
aggregated_df = transactions_df.groupby(['konto', 'Month'])['belopp_2'].sum().reset_index()

# Lägg till kontonamn från konto_df
aggregated_df = pd.merge(aggregated_df, filtered_konto_df[['kontonummer', 'kontonamn']], left_on='konto', right_on='kontonummer')

# Välj och döp om kolumner för det aggregerade sheetet
aggregated_df = aggregated_df[['konto', 'kontonamn', 'Month', 'belopp_2']]
aggregated_df.columns = ['Account_number', 'Account_title', 'Month', 'Value']

# Skapa ett nytt sheet för aggregerad data
ws_aggregated = wb.create_sheet(f'Transaction {year_short} - Aggregated')

# Skriv DataFrame till det nya sheetet med en progress bar
for r_idx, row in enumerate(tqdm(aggregated_df.values, desc="Writing aggregated data"), 1):
    for c_idx, value in enumerate(row, 1):
        ws_aggregated.cell(row=r_idx + 1, column=c_idx).value = value

# Lägg till rubrikerna
for col_num, column_title in enumerate(aggregated_df.columns, 1):
    ws_aggregated.cell(row=1, column=col_num).value = column_title

# Auto-resize kolumnbredd baserat på innehållet i det aggregerade sheetet
for col in ws_aggregated.columns:
    max_length = 0
    column = col[0].column_letter  # Get the column name
    for cell in col:
        if cell.value:
            cell_length = len(str(cell.value))
            if cell_length > max_length:
                max_length = cell_length
    adjusted_width = (max_length + 2) * 1.2  # Justera bredden lite extra för marginal
    ws_aggregated.column_dimensions[column].width = adjusted_width

## Lägg till unika månaderna i P&L och BS kolumnvis

# Hämta unika månader från den aggregerade datan, sortera och placera i P&L-sheetet och BS-sheetet
unique_months = sorted(aggregated_df['Month'].unique())

# Lägg till unika månader i P&L (reported)
for idx, month in enumerate(unique_months, start=4):  # Starta på kolumn D (index 4)
    cell = ws_pl.cell(row=4, column=idx)
    cell.value = month
    cell.alignment = Alignment(horizontal='left')

# Lägg till unika månader i BS (reported)
for idx, month in enumerate(unique_months, start=4):  # Starta på kolumn D (index 4)
    cell = ws_pl_1000_2999.cell(row=4, column=idx)
    cell.value = month
    cell.alignment = Alignment(horizontal='left')

# Lägg till formeln i D7 och kopiera nedåt och till höger för P&L (reported)
first_row = 7
last_row = ws_pl.max_row
first_col = 4  # D
last_col = first_col + len(unique_months) - 1

for row in range(first_row, last_row + 1):
    for col in range(first_col, last_col + 1):
        col_letter = get_column_letter(col)
        formula = f"=SUMIFS('Transaction {year_short} - Aggregated'!$D:$D,'Transaction {year_short} - Aggregated'!A:A,'P&L (reported)'!$B{row},'Transaction {year_short} - Aggregated'!C:C,'P&L (reported)'!{col_letter}$4)"
        ws_pl.cell(row=row, column=col).value = formula

# Formatera alla celler i P&L-sheetet från rad 6 och kolumn D nedåt och åt sidan med formatet #,##0;(#,##0);-
for row in range(6, ws_pl.max_row + 1):
    for col in range(4, ws_pl.max_column + 1):  # Startar på kolumn D (kolumn 4)
        cell = ws_pl.cell(row=row, column=col)
        cell.number_format = '#,##0;(#,##0);-'

## Fyll på med data för BS (reported)-sheetet

# Steg 1: Lägg till formeln från "Transaction {year_short} - Aggregated" bladet i cellerna och kopiera nedåt och till höger för BS (reported)
first_row_bs = 7
last_row_bs = ws_pl_1000_2999.max_row
first_col_bs = 5  # E
last_col_bs = first_col_bs + len(unique_months) - 2  # -2 eftersom vi hoppar över första månaden

for row in range(first_row_bs, last_row_bs + 1):
    for col in range(first_col_bs, last_col_bs + 1):
        col_letter = get_column_letter(col)
        formula = f"=SUMIFS('Transaction {year_short} - Aggregated'!$D:$D,'Transaction {year_short} - Aggregated'!A:A,'BS (reported)'!$B{row},'Transaction {year_short} - Aggregated'!C:C,'BS (reported)'!{col_letter}$4)"
        ws_pl_1000_2999.cell(row=row, column=col).value = formula

# Steg 2: Lägg till SUMIFS-formeln från "IB" bladet i kolumn D och fyll ner för alla konton i BS (reported)
target_column = 4  # Kolumn D (kolumn 4)

for row in range(first_row_bs, last_row_bs + 1):
    # Formel som ska läggas i varje cell i kolumn D från rad 7 och nedåt
    formula = f"=SUMIFS(IB!D:D, IB!$B:$B, 0, IB!$C:$C, 'BS (reported)'!$B{row})"
    
    # Lägg till formeln i cellen i kolumn D
    ws_pl_1000_2999.cell(row=row, column=target_column).value = formula

# Steg 3: Formatera alla celler i BS-sheetet från rad 6 och kolumn D nedåt och åt sidan med formatet #,##0;(#,##0);-
for row in range(6, ws_pl_1000_2999.max_row + 1):
    for col in range(4, ws_pl_1000_2999.max_column + 1):  # Startar på kolumn D (kolumn 4)
        cell = ws_pl_1000_2999.cell(row=row, column=col)
        cell.number_format = '#,##0;(#,##0);-'


# Definiera borders med en tunn topp och en tjock botten
custom_border = Border(top=Side(style='thin'), bottom=Side(style='thick'))


# Funktion för att få den aktuella sista raden
def get_max_row():
    return ws_pl.max_row



## P&L (reported)


# Funktion för att uppdatera SUMIFS-formlerna, undviker Sales och Other income
def apply_sumifs_formulas(first_row, last_row, exclude_rows, column_start=4):
    for row in range(first_row, last_row + 1):
        if row in exclude_rows:
            continue  # Hoppa över rader som inte ska ha SUMIFS-formler
        for col in range(column_start, ws_pl.max_column + 1):
            col_letter = get_column_letter(col)
            formula = f"=SUMIFS('Transaction {year_short} - Aggregated'!$D:$D,'Transaction {year_short} - Aggregated'!A:A,'P&L (reported)'!$B{row},'Transaction {year_short} - Aggregated'!C:C,'P&L (reported)'!{col_letter}$4)"
            ws_pl.cell(row=row, column=col).value = formula

# Sektion för 3000-3899-konton
first_3000_row = None
last_3899_row = None

pl_max_row = get_max_row()
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 3000 <= account_number <= 3899:
            if first_3000_row is None:
                first_3000_row = row
            last_3899_row = row

# Lägg till en tom rad ovanför första raden inom 3000-3899 intervallet
if first_3000_row is not None:
    sales_row = first_3000_row
    ws_pl.insert_rows(sales_row)

    # Lägg till "Sales" i fetstil på den nya raden
    ws_pl.cell(row=sales_row, column=3).value = "Sales"
    ws_pl.cell(row=sales_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 3000-3899, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{sales_row + 1}:{get_column_letter(col)}{last_3899_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=sales_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Sektion för 3900-3999-konton
first_3900_row = None
last_3999_row = None

pl_max_row = get_max_row()  # Uppdatera max row
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 3900 <= account_number <= 3999:
            if first_3900_row is None:
                first_3900_row = row
            last_3999_row = row

# Lägg till en tom rad ovanför första raden inom 3900-3999 intervallet
if first_3900_row is not None:
    other_income_row = first_3900_row
    ws_pl.insert_rows(other_income_row)

    # Lägg till "Other income" i fetstil på den nya raden
    ws_pl.cell(row=other_income_row, column=3).value = "Other income"
    ws_pl.cell(row=other_income_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 3900-3999, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{other_income_row + 1}:{get_column_letter(col)}{last_3999_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=other_income_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "Total revenue" som summerar "Sales" och "Other income"
if last_3999_row is not None:
    total_revenue_row = last_3999_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(total_revenue_row)

    # Lägg till "Total revenue" i fetstil på den nya raden
    ws_pl.cell(row=total_revenue_row, column=3).value = "Total revenue"
    ws_pl.cell(row=total_revenue_row, column=3).font = bold_font

    # Summera "Sales" och "Other income" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sales_cell = ws_pl.cell(row=sales_row, column=col).coordinate
        other_income_cell = ws_pl.cell(row=other_income_row, column=col).coordinate
        formula = f"={sales_cell}+{other_income_cell}"
        cell = ws_pl.cell(row=total_revenue_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "Total revenue"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=total_revenue_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad under "Total revenue"
    extra_row = total_revenue_row + 1
    ws_pl.insert_rows(extra_row)

# Uppdatera pl_max_row efter alla tillägg
pl_max_row = get_max_row()

# Använd den dynamiska funktionen för att uppdatera SUMIFS-formlerna för varje sektion
apply_sumifs_formulas(first_3000_row + 1, last_3899_row + 1, exclude_rows=[sales_row])
apply_sumifs_formulas(first_3900_row + 1, last_3999_row + 1, exclude_rows=[other_income_row])










# Funktion för att få den aktuella sista raden
def get_max_row():
    return ws_pl.max_row

# Funktion för att uppdatera SUMIFS-formlerna, undviker specifika rader
def apply_sumifs_formulas(first_row, last_row, exclude_rows, column_start=4):
    for row in range(first_row, last_row + 1):
        if row in exclude_rows:
            continue  # Hoppa över rader som inte ska ha SUMIFS-formler
        for col in range(column_start, ws_pl.max_column + 1):
            col_letter = get_column_letter(col)
            formula = f"=SUMIFS('Transaction {year_short} - Aggregated'!$D:$D,'Transaction {year_short} - Aggregated'!A:A,'P&L (reported)'!$B{row},'Transaction {year_short} - Aggregated'!C:C,'P&L (reported)'!{col_letter}$4)"
            ws_pl.cell(row=row, column=col).value = formula

# Sektion för 4000-4999-konton (COGS)
first_4000_row = None
last_4999_row = None

pl_max_row = get_max_row()
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 4000 <= account_number <= 4999:
            if first_4000_row is None:
                first_4000_row = row
            last_4999_row = row

# Lägg till en tom rad ovanför första raden inom 4000-4999 intervallet (COGS)
if first_4000_row is not None:
    cogs_row = first_4000_row
    ws_pl.insert_rows(cogs_row)

    # Lägg till "COGS" i fetstil på den nya raden
    ws_pl.cell(row=cogs_row, column=3).value = "COGS"
    ws_pl.cell(row=cogs_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 4000-4999, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{cogs_row + 1}:{get_column_letter(col)}{last_4999_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=cogs_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "Gross profit 1" som summerar "Total revenue" och "COGS"
if last_4999_row is not None:
    gross_profit_row = last_4999_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(gross_profit_row)

    # Lägg till "Gross profit 1" i fetstil på den nya raden
    ws_pl.cell(row=gross_profit_row, column=3).value = "Gross profit"
    ws_pl.cell(row=gross_profit_row, column=3).font = bold_font

    # Summera "Total revenue" och "COGS" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        total_revenue_cell = ws_pl.cell(row=total_revenue_row, column=col).coordinate
        cogs_cell = ws_pl.cell(row=cogs_row, column=col).coordinate
        formula = f"={total_revenue_cell}+{cogs_cell}"
        cell = ws_pl.cell(row=gross_profit_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "Gross profit 1"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=gross_profit_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad efter "Gross profit"
    ws_pl.insert_rows(gross_profit_row + 1)

# Sektion för 5000-7799-konton (Operating expenses)
first_5000_row = None
last_7799_row = None

pl_max_row = get_max_row()  # Uppdatera max row
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 5000 <= account_number <= 7799:
            if first_5000_row is None:
                first_5000_row = row
            last_7799_row = row

# Lägg till en tom rad ovanför första raden inom 5000-7799 intervallet (Operating expenses)
if first_5000_row is not None:
    operating_expenses_row = first_5000_row
    ws_pl.insert_rows(operating_expenses_row)

    # Lägg till "Operating expenses" i fetstil på den nya raden
    ws_pl.cell(row=operating_expenses_row, column=3).value = "Operating expenses"
    ws_pl.cell(row=operating_expenses_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 5000-7799, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{operating_expenses_row + 1}:{get_column_letter(col)}{last_7799_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=operating_expenses_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "Gross profit" som summerar "Gross profit" och "Operating expenses"
if last_7799_row is not None:
    ebitda_row = last_7799_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(ebitda_row)

    # Lägg till "Gross profit 2" i fetstil på den nya raden
    ws_pl.cell(row=ebitda_row, column=3).value = "EBITDA"
    ws_pl.cell(row=ebitda_row, column=3).font = bold_font

    # Summera "Gross profit" och "Operating expenses" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        gross_profit_cell = ws_pl.cell(row=gross_profit_row, column=col).coordinate
        operating_expenses_cell = ws_pl.cell(row=operating_expenses_row, column=col).coordinate
        formula = f"={gross_profit_cell}+{operating_expenses_cell}"
        cell = ws_pl.cell(row=ebitda_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "Gross profit 2"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=ebitda_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad efter "Gross profit 2"
    ws_pl.insert_rows(ebitda_row + 1)

# Uppdatera pl_max_row efter alla tillägg
pl_max_row = get_max_row()

# Använd den dynamiska funktionen för att uppdatera SUMIFS-formlerna för varje sektion
apply_sumifs_formulas(first_4000_row + 1, last_4999_row + 1, exclude_rows=[cogs_row])
apply_sumifs_formulas(first_5000_row + 1, last_7799_row + 1, exclude_rows=[operating_expenses_row])




# Sektion för 7800-7899-konton (D&A)
first_7800_row = None
last_7899_row = None

pl_max_row = get_max_row()  # Uppdatera max row
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 7800 <= account_number <= 7899:
            if first_7800_row is None:
                first_7800_row = row
            last_7899_row = row

# Lägg till en tom rad ovanför första raden inom 7800-7899 intervallet (D&A)
if first_7800_row is not None:
    da_row = first_7800_row
    ws_pl.insert_rows(da_row)

    # Lägg till "D&A" i fetstil på den nya raden
    ws_pl.cell(row=da_row, column=3).value = "D&A"
    ws_pl.cell(row=da_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 7800-7899, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{da_row + 1}:{get_column_letter(col)}{last_7899_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=da_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "EBIT" som summerar "EBITDA" och "D&A"
if last_7899_row is not None:
    ebit_row = last_7899_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(ebit_row)

    # Lägg till "EBIT" i fetstil på den nya raden
    ws_pl.cell(row=ebit_row, column=3).value = "EBIT"
    ws_pl.cell(row=ebit_row, column=3).font = bold_font

    # Summera "EBITDA" och "D&A" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        ebitda_cell = ws_pl.cell(row=ebitda_row, column=col).coordinate
        da_cell = ws_pl.cell(row=da_row, column=col).coordinate
        formula = f"={ebitda_cell}+{da_cell}"
        cell = ws_pl.cell(row=ebit_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "EBIT"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=ebit_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad efter "EBIT"
    ws_pl.insert_rows(ebit_row + 1)

# Uppdatera pl_max_row efter alla tillägg
pl_max_row = get_max_row()

# Använd den dynamiska funktionen för att uppdatera SUMIFS-formlerna för varje sektion
apply_sumifs_formulas(first_7800_row + 1, last_7899_row + 1, exclude_rows=[da_row])









# Sektion för 7900-8799-konton (Financial items)
first_7900_row = None
last_8799_row = None

pl_max_row = get_max_row()  # Uppdatera max row
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 7900 <= account_number <= 8799:
            if first_7900_row is None:
                first_7900_row = row
            last_8799_row = row

# Lägg till en tom rad ovanför första raden inom 7900-8799 intervallet (Financial items)
if first_7900_row is not None:
    financial_items_row = first_7900_row
    ws_pl.insert_rows(financial_items_row)

    # Lägg till "Financial items" i fetstil på den nya raden
    ws_pl.cell(row=financial_items_row, column=3).value = "Financial items"
    ws_pl.cell(row=financial_items_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 7900-8799, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{financial_items_row + 1}:{get_column_letter(col)}{last_8799_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=financial_items_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "EBT" som summerar "EBIT" och "Financial items"
if last_8799_row is not None:
    ebt_row = last_8799_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(ebt_row)

    # Lägg till "EBT" i fetstil på den nya raden
    ws_pl.cell(row=ebt_row, column=3).value = "EBT"
    ws_pl.cell(row=ebt_row, column=3).font = bold_font

    # Summera "EBIT" och "Financial items" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        ebit_cell = ws_pl.cell(row=ebit_row, column=col).coordinate  # Justering här för att peka på rätt rad
        financial_items_cell = ws_pl.cell(row=financial_items_row, column=col).coordinate
        formula = f"={ebit_cell}+{financial_items_cell}"
        cell = ws_pl.cell(row=ebt_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "EBT"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=ebt_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad efter "EBT"
    ws_pl.insert_rows(ebt_row + 1)

# Uppdatera pl_max_row efter alla tillägg
pl_max_row = get_max_row()

# Använd den dynamiska funktionen för att uppdatera SUMIFS-formlerna för varje sektion
apply_sumifs_formulas(first_7900_row + 1, last_8799_row + 1, exclude_rows=[financial_items_row])













# Sektion för 8800-8898-konton (Year-end adjustments och tax)
first_8800_row = None
last_8898_row = None

pl_max_row = get_max_row()  # Uppdatera max row
for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if 8800 <= account_number <= 8898:
            if first_8800_row is None:
                first_8800_row = row
            last_8898_row = row

# Lägg till en tom rad ovanför första raden inom 8800-8898 intervallet (Year-end adjustments och tax)
if first_8800_row is not None:
    year_end_adjustments_row = first_8800_row
    ws_pl.insert_rows(year_end_adjustments_row)

    # Lägg till "Year-end adjustments och tax" i fetstil på den nya raden
    ws_pl.cell(row=year_end_adjustments_row, column=3).value = "Year-end adjustments och tax"
    ws_pl.cell(row=year_end_adjustments_row, column=3).font = bold_font

    # Lägg till summeringar från första till sista raden inom 8800-8898, i cellerna till höger
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        sum_range = f"{get_column_letter(col)}{year_end_adjustments_row + 1}:{get_column_letter(col)}{last_8898_row + 1}"
        formula = f"=SUM({sum_range})"
        cell = ws_pl.cell(row=year_end_adjustments_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

# Lägg till en rad för "Net income" som summerar "EBIT" och "Year-end adjustments och tax"
if last_8898_row is not None:
    net_income_row = last_8898_row + 2  # +2 för att hantera den nya raden och summeringsraden
    ws_pl.insert_rows(net_income_row)

    # Lägg till "Net income" i fetstil på den nya raden
    ws_pl.cell(row=net_income_row, column=3).value = "Net income"
    ws_pl.cell(row=net_income_row, column=3).font = bold_font

    # Summera "EBT" och "Year-end adjustments och tax" för varje kolumn
    for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
        ebt_cell = ws_pl.cell(row=ebt_row, column=col).coordinate  # Justering här för att peka på rätt rad
        year_end_adjustments_cell = ws_pl.cell(row=year_end_adjustments_row, column=col).coordinate
        formula = f"={ebt_cell}+{year_end_adjustments_cell}"
        cell = ws_pl.cell(row=net_income_row, column=col)
        cell.value = formula
        cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet

    # Lägg till den anpassade bordern (tunn topp, tjock botten) på "Net income"-raden
    for col in range(2, ws_pl.max_column + 1):
        cell = ws_pl.cell(row=net_income_row, column=col)
        cell.border = custom_border

    # Lägg till en extra tom rad efter "Net income"
    ws_pl.insert_rows(net_income_row + 1)

# Uppdatera pl_max_row efter alla tillägg
pl_max_row = get_max_row()

# Använd den dynamiska funktionen för att uppdatera SUMIFS-formlerna för varje sektion
apply_sumifs_formulas(first_8800_row + 1, last_8898_row + 1, exclude_rows=[year_end_adjustments_row])













# Hitta raderna för konto 8999
first_8999_row = None
last_8999_row = None

for row in range(pl_first_row, pl_max_row + 1):
    account_number = ws_pl.cell(row=row, column=2).value
    if account_number is not None:
        account_number = int(account_number)

        if account_number == 8999:
            if first_8999_row is None:
                first_8999_row = row
            last_8999_row = row

# Uppdatera SUMIFS formeln för konto 8999
if first_8999_row is not None and last_8999_row is not None:
    for row in range(first_8999_row, last_8999_row + 1):
        for col in range(4, ws_pl.max_column + 1):  # Starta på kolumn D (kolumn 4)
            # Uppdatera formeln så att den refererar till rätt rad
            transaction_sheet = "'Transaction 21 - Aggregated'"
            formula = (
                f"=SUMIFS({transaction_sheet}!$D:$D,"
                f"{transaction_sheet}!A:A,'P&L (reported)'!$B{row},"
                f"{transaction_sheet}!C:C,'P&L (reported)'!{get_column_letter(col)}$4)"
            )
            cell = ws_pl.cell(row=row, column=col)
            cell.value = formula
            cell.number_format = '#,##0;(#,##0);-'  # Tillämpa nummerformatet






## FORTSÄTT MED ATT FÅ IN EN SUMIFS FRÅN IB TILL FÖRSTA MÅNADEN I BS!















    














# Funktion för att visa animationen
def animate():
    animation = "|/-\\"
    idx = 0
    while not stop_animation.is_set():
        sys.stdout.write(f"\rWorking... {animation[idx % len(animation)]}")
        sys.stdout.flush()
        idx += 1
        time.sleep(0.1)

# Starta animationen i en separat thread
stop_animation = threading.Event()
animation_thread = threading.Thread(target=animate)
animation_thread.start()

# Spara alla ändringar
wb.save(f'sie_to_pnl/data/{output_filename}')

# Stoppa animationen och visa att processen är klar
stop_animation.set()
animation_thread.join()
sys.stdout.write(f"\rExcel file saved as {output_filename}\n")
sys.stdout.write("Done!\n")
